Here I'll explain about each program one by one.

reverse.pl : This program reverses a list by recursively appending it's elements (in a LIFO way) to an empty list, thereby reversing the list (This property will be exploited later on in the append program too). Thus, the query to the program needs to be posed as rev([1,2,3,a,b],[],X). This yields X = [b,a,3,2,1], after which we've to PRESS ENTER to end the query. One can also check that rev([1,2,3],[a,b],X). yields X = [3,2,1,a,b], a very useful property that'll be used later in the append program.
palindrome.pl : Once reverse is done, palindrome follows immediately : Indeed, checking a string to be a palindrome is equivalent to it being equal to it's reverse. Thus we use the code written in the reverse program to write the palindrome declaration. The query is posed as palindrome([1,2,2]). This yields no as an answer, while palindrome([m,a,l,a,y,a,l,a,m]) yields yes.
count.pl : Count recursively counts the frequency of a given character in a string by continuously comparing it to the first element in the list, if they match, the count is incremented, if not, the first element is removed and the process continues. A query is posed as count(1,[1,1,a,2,1],X). , which yields X = 3 a an answer, after which we've to PRESS ENTER to end the query.
factorial.pl : The recursive algorithm for calculating factorials is pretty straightforward. The main challenge however, is that, arguments like factorial(N-1,...) can't be given, and hence statements such as M is N - 1 are needed to write the recursion. Queries are posed as factorial(4,X). , yields X = 24, after which we've to PRESS ENTER to end the query.
min_element.pl : This exploits the flexibility given by prolog to include two starting elements. Accordingly, comparisons are written and a recursion is set up. Queries are posed as factorial(4,X). , yields X = 24, after which we've to PRESS ENTER to end the query. Queries are posed as min([2,4,-1,2,3],X). , which yields -1 as the answer, and we've to PRESS ENTER to end the query.
append.pl : Here, we again use our reverse program in a clever manner, wherein we first reverse the first string and then feed it to rev, thus properly appending the strings together. Queries are posed as append([2,4,-1,2,3],[a,b,c]). , which yields X = [2,4,-1,2,3,a,b,c] as the answer.

