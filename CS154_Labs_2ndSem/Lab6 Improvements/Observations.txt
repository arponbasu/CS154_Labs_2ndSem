For the improvements, I'm submitting two games again, which are not improvements per se of my older games, but are more intricate codes (which I wrote once I got the time. For the first lab, I submitted the two games which I could manage within those 3 hours). I'll explain both of them here.
Handle_score.cpp:
In this game, we again have an array of circles (like we had for the Mouse_driving_test), but this time the game task is different. "Beneath" each circle, we have a random number which denotes the score for that circle, and on clicking any circle, that score gets added to the current score (the score can be negative too). Also, once a circle is clicked, it's erased from the window, and even clicking on that position after that has no effect (ie:- the circle ceases to exist completely, not just hidden behind white paint). If all the circles in the window are finished and/or the score goes below -10, the game gets over and an appropriate message is displayed on the window. This program thus demonstrates how we may augment classes with new variables and methods to attain our goals (the circle class was equipped with the score variable and its mutator function which allowed us to assign scores on it from outside), and also demonstrates the usage of the FLTK text library (which btw was difficult to access and understand and debug).
Screen_Saver.cpp:
This was arguably the toughest. Here, I introduced a timer in the program, whose syntax was pretty complicated. Then I generated an array of circles in the prgram in set them all to move in random, independent directions. This was achieved by introducing velocity as member variables of the Circle class. Then we exploited the theory of call_backs (which we had also used to implement the 15 puzzle game) In that process, when their paths coincide, they rub each other's shapes off. Per se this isn't a game, but visually it's quite interesting to watch, hence the name "Screen_saver".

